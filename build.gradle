apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'scala'

// We compile using Java 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/*
 * For now, instead of using an online library repository (e.g. Maven), we keep
 * local versions of .jars to reduce the number of things that can go wrong
 * during setup.
 */
dependencies {
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.guava:guava:14.0.1'
    compile 'net.alloyggp:escape-rope:0.0.3'
    compile 'net.sf.saxon:Saxon-HE:9.5.1-8'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'nu.validator.htmlparser:htmlparser:1.4'
    compile 'org.apache.xmlgraphics:batik-transcoder:1.7'
    compile 'org.clojure:clojure:1.1.0'
    compile 'org.javassist:javassist:3.17.1-GA'
    compile 'org.jsoup:jsoup:1.8.3'
    compile 'org.python:jython:2.5.3'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile 'org.scala-lang:scala-library:2.11.7'
    compile 'org.xhtmlrenderer:flying-saucer-core:9.0.8'
    testCompile 'junit:junit:4.11'
}

/*
 * It's convenient when working in Eclipse to have a test suite containing
 * all available tests. However, Gradle normally runs every test it can find
 * automatically, which would cause all tests to be run twice. This bit of
 * configuration prevents that from happening; Gradle just runs the test suite
 * instead.
 */
test {
    include 'org/ggp/base/test/AllTests.class'
}


//Various applications that can be run from Gradle:

//Note: The clojureConsole task should be run with the -q flag to quiet Gradle's normal output.
task clojureConsole(type: JavaExec) {
    main = 'org.ggp.base.apps.consoles.ClojureConsole'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task pythonConsole(type: JavaExec) {
    doFirst {
        println classpath.getAsPath()
    }
    main = 'org.ggp.base.apps.consoles.PythonConsole'
    classpath = sourceSets.main.runtimeClasspath
}

/* Not working, no main method found (ant doesn't work in Ant either):
task clojureGamer(type: JavaExec) {
    main='org.ggp.base.player.gamer.clojure.ClojureGamer'
    classpath = sourceSets.main.runtimeClasspath
}
*/

//You can tweak these JVM arguments for players run through Gradle.
def playerJvmArgs = [
        '-Xmx1500m', //Gives players a max heap size of 1500 MB
        '-server',
        '-XX:-DontCompileHugeMethods',
        '-XX:MinHeapFreeRatio=10',
        '-XX:MaxHeapFreeRatio=10']

//See playerRunner.sh
task playerRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.player.PlayerRunner'
    classpath = sourceSets.main.runtimeClasspath
    //These can be set on the command line with
    //-Pport=9147 and -Pgamer=RandomGamer as arguments.
    doFirst {
        args = [port, gamer]
    }
    jvmArgs = playerJvmArgs
}

task kiosk(type: JavaExec) {
    main = 'org.ggp.base.apps.kiosk.Kiosk'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

task server(type: JavaExec) {
    main = 'org.ggp.base.apps.server.Server'
    classpath = sourceSets.main.runtimeClasspath
}

task simpleGameSim(type: JavaExec) {
    main = 'org.ggp.base.apps.utilities.SimpleGameSim'
    classpath = sourceSets.main.runtimeClasspath
}

task tiltyardRequestFarm(type: JavaExec) {
    main = 'org.ggp.base.apps.tiltyard.TiltyardRequestFarm'
    classpath = sourceSets.main.runtimeClasspath
}

task player(type: JavaExec) {
    main = 'org.ggp.base.apps.player.Player'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

task propNetAnnotater(type: JavaExec) {
    main = 'org.ggp.base.util.propnet.factory.annotater.PropNetAnnotater'
    classpath = sourceSets.main.runtimeClasspath
}

//See gameServerRunner.sh
task gameServerRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.utilities.GameServerRunner'
    classpath = sourceSets.main.runtimeClasspath
    doFirst {
        args = myargs.split().toList()
    }
}

// This was used to generate the Gradle wrapper.
task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

// This only needs to be uncommented when publishing to Maven.
// apply from: 'publish.gradle'
